version: '3.8'

services:
    db:
        image: postgres:15-alpine
        container_name: db
        restart: always
        environment:
            POSTGRES_DB: ${DB_NAME:-gauzy}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASS:-gauzy_password}
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'psql postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@localhost:5432/$${POSTGRES_DB} || exit 1',
                ]
        volumes:
            - postgres_data:/var/lib/postgresql/data/
            - ./.deploy/db/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
        ports:
            - '5432:5432'
        networks:
            - overlay

    cube:
        image: cubejs/cube:latest
        container_name: cube
        ports:
            - '4000:4000' # Cube Playground
            - '5430:5430' # Port for Cube SQL
        environment:
            - CUBEJS_DEV_MODE=true
            - CUBEJS_DB_TYPE=postgres
            - CUBEJS_DB_HOST=db
            - CUBEJS_DB_PORT=5432
            - CUBEJS_DB_NAME=${DB_NAME:-gauzy}
            - CUBEJS_DB_USER=${DB_USER:-postgres}
            - CUBEJS_DB_PASS=${DB_PASS:-gauzy_password}
            # Credentials to connect to Cube SQL APIs
            - CUBEJS_PG_SQL_PORT=5430
            - CUBEJS_SQL_USER=${CUBE_USER:-cube_user}
            - CUBEJS_SQL_PASSWORD=${CUBE_PASS:-cube_pass}
        volumes:
            - 'cube_data:/cube/conf'
        links:
            - db
        networks:
            - overlay

    elasticsearch:
        image: 'elasticsearch:7.17.7'
        container_name: elasticsearch
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        environment:
            ES_JAVA_OPTS: -Xms512m -Xmx1024m
            discovery.type: single-node
            http.port: 9200
            http.cors.enabled: true
            http.cors.allow-origin: http://localhost:3000,http://127.0.0.1:3000,http://localhost:1358,http://127.0.0.1:1358
            http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
            http.cors.allow-credentials: true
            bootstrap.memory_lock: true
            xpack.security.enabled: 'false'
        ports:
            - '9200'
            - '9300'
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cat/health']
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 20s
        networks:
            - overlay

    # Elasticsearch Management UI
    dejavu:
        image: appbaseio/dejavu:3.6.0
        container_name: dejavu
        ports:
            - '1358:1358'
        links:
            - elasticsearch
        networks:
            - overlay

    redis:
        image: 'redis:7.0.2-alpine'
        container_name: redis
        restart: unless-stopped
        ports:
            - '6379'
        volumes:
            - redis_data:/data
        networks:
            - overlay

    minio:
        restart: always
        image: quay.io/minio/minio:latest
        container_name: minio
        volumes:
            - minio_data:/data
        environment:
            MINIO_ROOT_USER: worksuite-access-key
            MINIO_ROOT_PASSWORD: worksuite-secret-key
        command: server /data --address :9000 --console-address ":9001"
        ports:
            - 9000:9000
            - 9001:9001
        networks:
            - overlay

    minio_create_buckets:
        image: minio/mc
        environment:
            - MINIO_ROOT_USER=worksuite-access-key
            - MINIO_ROOT_PASSWORD=worksuite-secret-key
        entrypoint:
            - '/bin/sh'
            - '-c'
        command:
            - "until (/usr/bin/mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD) do
              echo 'Waiting to start minio...' && sleep 1;
              done;
              /usr/bin/mc mb minio/worksuite --region=eu-north-1;
              exit 0;"
        depends_on:
            - minio
        networks:
            - overlay

    pgweb:
        image: sosedoff/pgweb
        container_name: pgweb
        restart: always
        depends_on:
            - db
        links:
            - db:${DB_HOST:-db}
        environment:
            POSTGRES_DB: ${DB_NAME:-gauzy}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASS:-gauzy_password}
            PGWEB_DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASS:-gauzy_password}@${DB_HOST:-db}:${DB_PORT:-5432}/${DB_NAME:-gauzy}?sslmode=disable
        ports:
            - '8081:8081'
        networks:
            - overlay

    api:
        container_name: api
        image: ghcr.io/worksuiteio/gauzy-api:latest
        environment:
            API_HOST: ${API_HOST:-api}
            API_PORT: ${API_PORT:-3000}
            NODE_ENV: ${NODE_ENV:-development}
            DB_HOST: db
            API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
            CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
            SENTRY_DSN: ${SENTRY_DSN:-}
        env_file:
            - .env.compose
        entrypoint: './entrypoint.compose.sh'
        command: ['node', 'main.js']
        restart: on-failure
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
            minio:
                condition: service_started
            minio_create_buckets:
                condition: service_started
            elasticsearch:
                condition: service_healthy
            cube:
                condition: service_started
        links:
            - db:${DB_HOST:-db}
            - cube:${CUBE_HOST:-cube}
            - redis:${REDIS_HOST:-redis}
            - minio:${MINIO_HOST:-minio}
            - elasticsearch:${ES_HOST:-elasticsearch}
        # volumes:
        # - webapp_node_modules:/srv/gauzy/node_modules
        # - api_node_modules:/srv/gauzy/apps/api/node_modules
        ports:
            - '3000:${API_PORT:-3000}'
        networks:
            - overlay

    webapp:
        container_name: webapp
        image: ghcr.io/worksuiteio/gauzy-webapp:latest
        environment:
            WEB_HOST: ${WEB_HOST:-webapp}
            WEB_PORT: ${WEB_PORT:-4200}
            NODE_ENV: ${NODE_ENV:-development}
            API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
            CLIENT_BASE_URL: ${CLIENT_BASE_URL:-http://localhost:4200}
            SENTRY_DSN: ${SENTRY_DSN:-}
            CHATWOOT_SDK_TOKEN: ${CHATWOOT_SDK_TOKEN:-}
            CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
            CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
            GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
            GOOGLE_PLACE_AUTOCOMPLETE: ${GOOGLE_PLACE_AUTOCOMPLETE:-false}
            DEFAULT_LATITUDE: ${DEFAULT_LATITUDE:-42.6459136}
            DEFAULT_LONGITUDE: ${DEFAULT_LONGITUDE:-23.3332736}
            DEFAULT_CURRENCY: ${DEFAULT_CURRENCY:-USD}
            DEMO: 'true'
            API_HOST: ${API_HOST:-api}
            API_PORT: ${API_PORT:-3000}
        entrypoint: './entrypoint.compose.sh'
        command: ['nginx', '-g', 'daemon off;']
        env_file:
            - .env.compose
        restart: on-failure
        links:
            - db:${DB_HOST:-db}
            - api:${API_HOST:-api}
            - cube:${CUBE_HOST:-cube}
            - redis:${REDIS_HOST:-redis}
            - minio:${MINIO_HOST:-minio}
            - elasticsearch:${ES_HOST:-elasticsearch}
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
            minio:
                condition: service_started
            minio_create_buckets:
                condition: service_started
            elasticsearch:
                condition: service_healthy
            api:
                condition: service_started
        # volumes:
        # - webapp_node_modules:/srv/gauzy/node_modules
        ports:
            - '4200:${UI_PORT:-4200}'
        networks:
            - overlay

volumes:
    # webapp_node_modules:
    # api_node_modules:
    redis_data: {}
    postgres_data: {}
    elasticsearch_data: {}
    minio_data: {}
    cube_data: {}
    certificates: {}

networks:
    overlay:
        driver: bridge
